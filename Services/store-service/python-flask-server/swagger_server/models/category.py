# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.item import Item  # noqa: F401,E501
from swagger_server import util


class Category(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, store_id: int=None, category: str=None, display_sequence: int=None, items: List[Item]=None):  # noqa: E501
        """Category - a model defined in Swagger

        :param id: The id of this Category.  # noqa: E501
        :type id: int
        :param store_id: The store_id of this Category.  # noqa: E501
        :type store_id: int
        :param category: The category of this Category.  # noqa: E501
        :type category: str
        :param display_sequence: The display_sequence of this Category.  # noqa: E501
        :type display_sequence: int
        :param items: The items of this Category.  # noqa: E501
        :type items: List[Item]
        """
        self.swagger_types = {
            'id': int,
            'store_id': int,
            'category': str,
            'display_sequence': int,
            'items': List[Item]
        }

        self.attribute_map = {
            'id': 'id',
            'store_id': 'store_id',
            'category': 'category',
            'display_sequence': 'display_sequence',
            'items': 'items'
        }
        self._id = id
        self._store_id = store_id
        self._category = category
        self._display_sequence = display_sequence
        self._items = items

    @classmethod
    def from_dict(cls, dikt) -> 'Category':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Category of this Category.  # noqa: E501
        :rtype: Category
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Category.


        :return: The id of this Category.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Category.


        :param id: The id of this Category.
        :type id: int
        """

        self._id = id

    @property
    def store_id(self) -> int:
        """Gets the store_id of this Category.


        :return: The store_id of this Category.
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id: int):
        """Sets the store_id of this Category.


        :param store_id: The store_id of this Category.
        :type store_id: int
        """

        self._store_id = store_id

    @property
    def category(self) -> str:
        """Gets the category of this Category.


        :return: The category of this Category.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this Category.


        :param category: The category of this Category.
        :type category: str
        """

        self._category = category

    @property
    def display_sequence(self) -> int:
        """Gets the display_sequence of this Category.


        :return: The display_sequence of this Category.
        :rtype: int
        """
        return self._display_sequence

    @display_sequence.setter
    def display_sequence(self, display_sequence: int):
        """Sets the display_sequence of this Category.


        :param display_sequence: The display_sequence of this Category.
        :type display_sequence: int
        """

        self._display_sequence = display_sequence

    @property
    def items(self) -> List[Item]:
        """Gets the items of this Category.


        :return: The items of this Category.
        :rtype: List[Item]
        """
        return self._items

    @items.setter
    def items(self, items: List[Item]):
        """Sets the items of this Category.


        :param items: The items of this Category.
        :type items: List[Item]
        """

        self._items = items
