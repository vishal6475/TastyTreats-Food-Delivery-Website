# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.type import Type  # noqa: F401,E501
from swagger_server import util


class Store(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, addr_1: str=None, addr_2: str=None, city: str=None, state: str=None, pincode: str=None, types: List[Type]=None, open: str=None, close: str=None, delivery: str=None, delivery_fee: float=None, min_order: float=None, photo: str=None):  # noqa: E501
        """Store - a model defined in Swagger

        :param id: The id of this Store.  # noqa: E501
        :type id: int
        :param name: The name of this Store.  # noqa: E501
        :type name: str
        :param addr_1: The addr_1 of this Store.  # noqa: E501
        :type addr_1: str
        :param addr_2: The addr_2 of this Store.  # noqa: E501
        :type addr_2: str
        :param city: The city of this Store.  # noqa: E501
        :type city: str
        :param state: The state of this Store.  # noqa: E501
        :type state: str
        :param pincode: The pincode of this Store.  # noqa: E501
        :type pincode: str
        :param types: The types of this Store.  # noqa: E501
        :type types: List[Type]
        :param open: The open of this Store.  # noqa: E501
        :type open: str
        :param close: The close of this Store.  # noqa: E501
        :type close: str
        :param delivery: The delivery of this Store.  # noqa: E501
        :type delivery: str
        :param delivery_fee: The delivery_fee of this Store.  # noqa: E501
        :type delivery_fee: float
        :param min_order: The min_order of this Store.  # noqa: E501
        :type min_order: float
        :param photo: The photo of this Store.  # noqa: E501
        :type photo: str
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'addr_1': str,
            'addr_2': str,
            'city': str,
            'state': str,
            'pincode': str,
            'types': List[Type],
            'open': str,
            'close': str,
            'delivery': str,
            'delivery_fee': float,
            'min_order': float,
            'photo': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'addr_1': 'addr_1',
            'addr_2': 'addr_2',
            'city': 'city',
            'state': 'state',
            'pincode': 'pincode',
            'types': 'types',
            'open': 'open',
            'close': 'close',
            'delivery': 'delivery',
            'delivery_fee': 'delivery_fee',
            'min_order': 'min_order',
            'photo': 'photo'
        }
        self._id = id
        self._name = name
        self._addr_1 = addr_1
        self._addr_2 = addr_2
        self._city = city
        self._state = state
        self._pincode = pincode
        self._types = types
        self._open = open
        self._close = close
        self._delivery = delivery
        self._delivery_fee = delivery_fee
        self._min_order = min_order
        self._photo = photo

    @classmethod
    def from_dict(cls, dikt) -> 'Store':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Store of this Store.  # noqa: E501
        :rtype: Store
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Store.


        :return: The id of this Store.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Store.


        :param id: The id of this Store.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Store.


        :return: The name of this Store.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Store.


        :param name: The name of this Store.
        :type name: str
        """

        self._name = name

    @property
    def addr_1(self) -> str:
        """Gets the addr_1 of this Store.


        :return: The addr_1 of this Store.
        :rtype: str
        """
        return self._addr_1

    @addr_1.setter
    def addr_1(self, addr_1: str):
        """Sets the addr_1 of this Store.


        :param addr_1: The addr_1 of this Store.
        :type addr_1: str
        """

        self._addr_1 = addr_1

    @property
    def addr_2(self) -> str:
        """Gets the addr_2 of this Store.


        :return: The addr_2 of this Store.
        :rtype: str
        """
        return self._addr_2

    @addr_2.setter
    def addr_2(self, addr_2: str):
        """Sets the addr_2 of this Store.


        :param addr_2: The addr_2 of this Store.
        :type addr_2: str
        """

        self._addr_2 = addr_2

    @property
    def city(self) -> str:
        """Gets the city of this Store.


        :return: The city of this Store.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this Store.


        :param city: The city of this Store.
        :type city: str
        """

        self._city = city

    @property
    def state(self) -> str:
        """Gets the state of this Store.


        :return: The state of this Store.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Store.


        :param state: The state of this Store.
        :type state: str
        """

        self._state = state

    @property
    def pincode(self) -> str:
        """Gets the pincode of this Store.


        :return: The pincode of this Store.
        :rtype: str
        """
        return self._pincode

    @pincode.setter
    def pincode(self, pincode: str):
        """Sets the pincode of this Store.


        :param pincode: The pincode of this Store.
        :type pincode: str
        """

        self._pincode = pincode

    @property
    def types(self) -> List[Type]:
        """Gets the types of this Store.


        :return: The types of this Store.
        :rtype: List[Type]
        """
        return self._types

    @types.setter
    def types(self, types: List[Type]):
        """Sets the types of this Store.


        :param types: The types of this Store.
        :type types: List[Type]
        """

        self._types = types

    @property
    def open(self) -> str:
        """Gets the open of this Store.


        :return: The open of this Store.
        :rtype: str
        """
        return self._open

    @open.setter
    def open(self, open: str):
        """Sets the open of this Store.


        :param open: The open of this Store.
        :type open: str
        """

        self._open = open

    @property
    def close(self) -> str:
        """Gets the close of this Store.


        :return: The close of this Store.
        :rtype: str
        """
        return self._close

    @close.setter
    def close(self, close: str):
        """Sets the close of this Store.


        :param close: The close of this Store.
        :type close: str
        """

        self._close = close

    @property
    def delivery(self) -> str:
        """Gets the delivery of this Store.


        :return: The delivery of this Store.
        :rtype: str
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery: str):
        """Sets the delivery of this Store.


        :param delivery: The delivery of this Store.
        :type delivery: str
        """
        allowed_values = ["Y", "N"]  # noqa: E501
        if delivery not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery` ({0}), must be one of {1}"
                .format(delivery, allowed_values)
            )

        self._delivery = delivery

    @property
    def delivery_fee(self) -> float:
        """Gets the delivery_fee of this Store.


        :return: The delivery_fee of this Store.
        :rtype: float
        """
        return self._delivery_fee

    @delivery_fee.setter
    def delivery_fee(self, delivery_fee: float):
        """Sets the delivery_fee of this Store.


        :param delivery_fee: The delivery_fee of this Store.
        :type delivery_fee: float
        """

        self._delivery_fee = delivery_fee

    @property
    def min_order(self) -> float:
        """Gets the min_order of this Store.


        :return: The min_order of this Store.
        :rtype: float
        """
        return self._min_order

    @min_order.setter
    def min_order(self, min_order: float):
        """Sets the min_order of this Store.


        :param min_order: The min_order of this Store.
        :type min_order: float
        """

        self._min_order = min_order

    @property
    def photo(self) -> str:
        """Gets the photo of this Store.


        :return: The photo of this Store.
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo: str):
        """Sets the photo of this Store.


        :param photo: The photo of this Store.
        :type photo: str
        """

        self._photo = photo
