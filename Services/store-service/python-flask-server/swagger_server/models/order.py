# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.ordered_item import OrderedItem  # noqa: F401,E501
from swagger_server import util


class Order(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, customer_id: int=None, store_id: int=None, _date: str=None, unit_no: str=None, addr_1: str=None, addr_2: str=None, city: str=None, state: str=None, pincode: str=None, customer_name: str=None, card_number: str=None, card_expiry: str=None, payment_type: str=None, delivery_pickup: str=None, total_amount: float=None, items: List[OrderedItem]=None):  # noqa: E501
        """Order - a model defined in Swagger

        :param id: The id of this Order.  # noqa: E501
        :type id: int
        :param customer_id: The customer_id of this Order.  # noqa: E501
        :type customer_id: int
        :param store_id: The store_id of this Order.  # noqa: E501
        :type store_id: int
        :param _date: The _date of this Order.  # noqa: E501
        :type _date: str
        :param unit_no: The unit_no of this Order.  # noqa: E501
        :type unit_no: str
        :param addr_1: The addr_1 of this Order.  # noqa: E501
        :type addr_1: str
        :param addr_2: The addr_2 of this Order.  # noqa: E501
        :type addr_2: str
        :param city: The city of this Order.  # noqa: E501
        :type city: str
        :param state: The state of this Order.  # noqa: E501
        :type state: str
        :param pincode: The pincode of this Order.  # noqa: E501
        :type pincode: str
        :param customer_name: The customer_name of this Order.  # noqa: E501
        :type customer_name: str
        :param card_number: The card_number of this Order.  # noqa: E501
        :type card_number: str
        :param card_expiry: The card_expiry of this Order.  # noqa: E501
        :type card_expiry: str
        :param payment_type: The payment_type of this Order.  # noqa: E501
        :type payment_type: str
        :param delivery_pickup: The delivery_pickup of this Order.  # noqa: E501
        :type delivery_pickup: str
        :param total_amount: The total_amount of this Order.  # noqa: E501
        :type total_amount: float
        :param items: The items of this Order.  # noqa: E501
        :type items: List[OrderedItem]
        """
        self.swagger_types = {
            'id': int,
            'customer_id': int,
            'store_id': int,
            '_date': str,
            'unit_no': str,
            'addr_1': str,
            'addr_2': str,
            'city': str,
            'state': str,
            'pincode': str,
            'customer_name': str,
            'card_number': str,
            'card_expiry': str,
            'payment_type': str,
            'delivery_pickup': str,
            'total_amount': float,
            'items': List[OrderedItem]
        }

        self.attribute_map = {
            'id': 'id',
            'customer_id': 'customer_id',
            'store_id': 'store_id',
            '_date': 'date',
            'unit_no': 'unit_no',
            'addr_1': 'addr_1',
            'addr_2': 'addr_2',
            'city': 'city',
            'state': 'state',
            'pincode': 'pincode',
            'customer_name': 'customer_name',
            'card_number': 'card_number',
            'card_expiry': 'card_expiry',
            'payment_type': 'payment_type',
            'delivery_pickup': 'delivery_pickup',
            'total_amount': 'total_amount',
            'items': 'items'
        }
        self._id = id
        self._customer_id = customer_id
        self._store_id = store_id
        self.__date = _date
        self._unit_no = unit_no
        self._addr_1 = addr_1
        self._addr_2 = addr_2
        self._city = city
        self._state = state
        self._pincode = pincode
        self._customer_name = customer_name
        self._card_number = card_number
        self._card_expiry = card_expiry
        self._payment_type = payment_type
        self._delivery_pickup = delivery_pickup
        self._total_amount = total_amount
        self._items = items

    @classmethod
    def from_dict(cls, dikt) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Order of this Order.  # noqa: E501
        :rtype: Order
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Order.


        :return: The id of this Order.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Order.


        :param id: The id of this Order.
        :type id: int
        """

        self._id = id

    @property
    def customer_id(self) -> int:
        """Gets the customer_id of this Order.


        :return: The customer_id of this Order.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: int):
        """Sets the customer_id of this Order.


        :param customer_id: The customer_id of this Order.
        :type customer_id: int
        """

        self._customer_id = customer_id

    @property
    def store_id(self) -> int:
        """Gets the store_id of this Order.


        :return: The store_id of this Order.
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id: int):
        """Sets the store_id of this Order.


        :param store_id: The store_id of this Order.
        :type store_id: int
        """

        self._store_id = store_id

    @property
    def _date(self) -> str:
        """Gets the _date of this Order.


        :return: The _date of this Order.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date: str):
        """Sets the _date of this Order.


        :param _date: The _date of this Order.
        :type _date: str
        """

        self.__date = _date

    @property
    def unit_no(self) -> str:
        """Gets the unit_no of this Order.


        :return: The unit_no of this Order.
        :rtype: str
        """
        return self._unit_no

    @unit_no.setter
    def unit_no(self, unit_no: str):
        """Sets the unit_no of this Order.


        :param unit_no: The unit_no of this Order.
        :type unit_no: str
        """

        self._unit_no = unit_no

    @property
    def addr_1(self) -> str:
        """Gets the addr_1 of this Order.


        :return: The addr_1 of this Order.
        :rtype: str
        """
        return self._addr_1

    @addr_1.setter
    def addr_1(self, addr_1: str):
        """Sets the addr_1 of this Order.


        :param addr_1: The addr_1 of this Order.
        :type addr_1: str
        """

        self._addr_1 = addr_1

    @property
    def addr_2(self) -> str:
        """Gets the addr_2 of this Order.


        :return: The addr_2 of this Order.
        :rtype: str
        """
        return self._addr_2

    @addr_2.setter
    def addr_2(self, addr_2: str):
        """Sets the addr_2 of this Order.


        :param addr_2: The addr_2 of this Order.
        :type addr_2: str
        """

        self._addr_2 = addr_2

    @property
    def city(self) -> str:
        """Gets the city of this Order.


        :return: The city of this Order.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this Order.


        :param city: The city of this Order.
        :type city: str
        """

        self._city = city

    @property
    def state(self) -> str:
        """Gets the state of this Order.


        :return: The state of this Order.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Order.


        :param state: The state of this Order.
        :type state: str
        """

        self._state = state

    @property
    def pincode(self) -> str:
        """Gets the pincode of this Order.


        :return: The pincode of this Order.
        :rtype: str
        """
        return self._pincode

    @pincode.setter
    def pincode(self, pincode: str):
        """Sets the pincode of this Order.


        :param pincode: The pincode of this Order.
        :type pincode: str
        """

        self._pincode = pincode

    @property
    def customer_name(self) -> str:
        """Gets the customer_name of this Order.


        :return: The customer_name of this Order.
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name: str):
        """Sets the customer_name of this Order.


        :param customer_name: The customer_name of this Order.
        :type customer_name: str
        """

        self._customer_name = customer_name

    @property
    def card_number(self) -> str:
        """Gets the card_number of this Order.


        :return: The card_number of this Order.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number: str):
        """Sets the card_number of this Order.


        :param card_number: The card_number of this Order.
        :type card_number: str
        """

        self._card_number = card_number

    @property
    def card_expiry(self) -> str:
        """Gets the card_expiry of this Order.


        :return: The card_expiry of this Order.
        :rtype: str
        """
        return self._card_expiry

    @card_expiry.setter
    def card_expiry(self, card_expiry: str):
        """Sets the card_expiry of this Order.


        :param card_expiry: The card_expiry of this Order.
        :type card_expiry: str
        """

        self._card_expiry = card_expiry

    @property
    def payment_type(self) -> str:
        """Gets the payment_type of this Order.


        :return: The payment_type of this Order.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type: str):
        """Sets the payment_type of this Order.


        :param payment_type: The payment_type of this Order.
        :type payment_type: str
        """
        allowed_values = ["Card", "Points"]  # noqa: E501
        if payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_type` ({0}), must be one of {1}"
                .format(payment_type, allowed_values)
            )

        self._payment_type = payment_type

    @property
    def delivery_pickup(self) -> str:
        """Gets the delivery_pickup of this Order.


        :return: The delivery_pickup of this Order.
        :rtype: str
        """
        return self._delivery_pickup

    @delivery_pickup.setter
    def delivery_pickup(self, delivery_pickup: str):
        """Sets the delivery_pickup of this Order.


        :param delivery_pickup: The delivery_pickup of this Order.
        :type delivery_pickup: str
        """
        allowed_values = ["D", "P"]  # noqa: E501
        if delivery_pickup not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_pickup` ({0}), must be one of {1}"
                .format(delivery_pickup, allowed_values)
            )

        self._delivery_pickup = delivery_pickup

    @property
    def total_amount(self) -> float:
        """Gets the total_amount of this Order.


        :return: The total_amount of this Order.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount: float):
        """Sets the total_amount of this Order.


        :param total_amount: The total_amount of this Order.
        :type total_amount: float
        """

        self._total_amount = total_amount

    @property
    def items(self) -> List[OrderedItem]:
        """Gets the items of this Order.


        :return: The items of this Order.
        :rtype: List[OrderedItem]
        """
        return self._items

    @items.setter
    def items(self, items: List[OrderedItem]):
        """Sets the items of this Order.


        :param items: The items of this Order.
        :type items: List[OrderedItem]
        """

        self._items = items
