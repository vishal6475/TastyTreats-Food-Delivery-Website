# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Item(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, category_id: int=None, name: str=None, description: str=None, price: float=None, veg: int=None, photo: str=None, status: int=None):  # noqa: E501
        """Item - a model defined in Swagger

        :param id: The id of this Item.  # noqa: E501
        :type id: int
        :param category_id: The category_id of this Item.  # noqa: E501
        :type category_id: int
        :param name: The name of this Item.  # noqa: E501
        :type name: str
        :param description: The description of this Item.  # noqa: E501
        :type description: str
        :param price: The price of this Item.  # noqa: E501
        :type price: float
        :param veg: The veg of this Item.  # noqa: E501
        :type veg: int
        :param photo: The photo of this Item.  # noqa: E501
        :type photo: str
        :param status: The status of this Item.  # noqa: E501
        :type status: int
        """
        self.swagger_types = {
            'id': int,
            'category_id': int,
            'name': str,
            'description': str,
            'price': float,
            'veg': int,
            'photo': str,
            'status': int
        }

        self.attribute_map = {
            'id': 'id',
            'category_id': 'category_id',
            'name': 'name',
            'description': 'description',
            'price': 'price',
            'veg': 'veg',
            'photo': 'photo',
            'status': 'status'
        }
        self._id = id
        self._category_id = category_id
        self._name = name
        self._description = description
        self._price = price
        self._veg = veg
        self._photo = photo
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Item of this Item.  # noqa: E501
        :rtype: Item
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Item.


        :return: The id of this Item.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Item.


        :param id: The id of this Item.
        :type id: int
        """

        self._id = id

    @property
    def category_id(self) -> int:
        """Gets the category_id of this Item.


        :return: The category_id of this Item.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id: int):
        """Sets the category_id of this Item.


        :param category_id: The category_id of this Item.
        :type category_id: int
        """

        self._category_id = category_id

    @property
    def name(self) -> str:
        """Gets the name of this Item.


        :return: The name of this Item.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Item.


        :param name: The name of this Item.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this Item.


        :return: The description of this Item.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Item.


        :param description: The description of this Item.
        :type description: str
        """

        self._description = description

    @property
    def price(self) -> float:
        """Gets the price of this Item.


        :return: The price of this Item.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this Item.


        :param price: The price of this Item.
        :type price: float
        """

        self._price = price

    @property
    def veg(self) -> int:
        """Gets the veg of this Item.


        :return: The veg of this Item.
        :rtype: int
        """
        return self._veg

    @veg.setter
    def veg(self, veg: int):
        """Sets the veg of this Item.


        :param veg: The veg of this Item.
        :type veg: int
        """
        allowed_values = ["0", "1"]  # noqa: E501
        if veg not in allowed_values:
            raise ValueError(
                "Invalid value for `veg` ({0}), must be one of {1}"
                .format(veg, allowed_values)
            )

        self._veg = veg

    @property
    def photo(self) -> str:
        """Gets the photo of this Item.


        :return: The photo of this Item.
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo: str):
        """Sets the photo of this Item.


        :param photo: The photo of this Item.
        :type photo: str
        """

        self._photo = photo

    @property
    def status(self) -> int:
        """Gets the status of this Item.


        :return: The status of this Item.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this Item.


        :param status: The status of this Item.
        :type status: int
        """
        allowed_values = ["0", "1"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
