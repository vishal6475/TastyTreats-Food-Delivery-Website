# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class OrderedItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, order_id: int=None, name: str=None, price: float=None, quantity: int=None):  # noqa: E501
        """OrderedItem - a model defined in Swagger

        :param id: The id of this OrderedItem.  # noqa: E501
        :type id: int
        :param order_id: The order_id of this OrderedItem.  # noqa: E501
        :type order_id: int
        :param name: The name of this OrderedItem.  # noqa: E501
        :type name: str
        :param price: The price of this OrderedItem.  # noqa: E501
        :type price: float
        :param quantity: The quantity of this OrderedItem.  # noqa: E501
        :type quantity: int
        """
        self.swagger_types = {
            'id': int,
            'order_id': int,
            'name': str,
            'price': float,
            'quantity': int
        }

        self.attribute_map = {
            'id': 'id',
            'order_id': 'order_id',
            'name': 'name',
            'price': 'price',
            'quantity': 'quantity'
        }
        self._id = id
        self._order_id = order_id
        self._name = name
        self._price = price
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt) -> 'OrderedItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OrderedItem of this OrderedItem.  # noqa: E501
        :rtype: OrderedItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this OrderedItem.


        :return: The id of this OrderedItem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this OrderedItem.


        :param id: The id of this OrderedItem.
        :type id: int
        """

        self._id = id

    @property
    def order_id(self) -> int:
        """Gets the order_id of this OrderedItem.


        :return: The order_id of this OrderedItem.
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id: int):
        """Sets the order_id of this OrderedItem.


        :param order_id: The order_id of this OrderedItem.
        :type order_id: int
        """

        self._order_id = order_id

    @property
    def name(self) -> str:
        """Gets the name of this OrderedItem.


        :return: The name of this OrderedItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this OrderedItem.


        :param name: The name of this OrderedItem.
        :type name: str
        """

        self._name = name

    @property
    def price(self) -> float:
        """Gets the price of this OrderedItem.


        :return: The price of this OrderedItem.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this OrderedItem.


        :param price: The price of this OrderedItem.
        :type price: float
        """

        self._price = price

    @property
    def quantity(self) -> int:
        """Gets the quantity of this OrderedItem.


        :return: The quantity of this OrderedItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this OrderedItem.


        :param quantity: The quantity of this OrderedItem.
        :type quantity: int
        """

        self._quantity = quantity
