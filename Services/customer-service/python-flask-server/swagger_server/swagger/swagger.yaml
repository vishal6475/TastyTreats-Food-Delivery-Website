openapi: 3.0.3
info:
  title: Swagger TastyTreat Restaurant API (OpenAPI 3.0)
  description: This is a swagger model for TastyTreat Restaurant API
  version: 1.0.11
servers:
- url: http://localhost:8080/v1
tags:
- name: customers
  description: Account operations for customers
paths:
  /customers:
    post:
      tags:
      - customers
      summary: Create customer
      operationId: create_customer
      requestBody:
        description: Created customer object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        "201":
          description: Customer has been created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "400":
          description: Invalid input details provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputError'
        "500":
          description: Unexpected failure in the service layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServiceError'
      x-openapi-router-controller: swagger_server.controllers.customers_controller
  /customers/login:
    get:
      tags:
      - customers
      summary: Logs a customer into the system
      description: This logs a customer into the system and returns authorized token
      operationId: login_customer
      parameters:
      - name: email
        in: query
        description: The email address of a customer
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Customer logged in successfully.
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "400":
          description: Invalid username/password supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputError'
      x-openapi-router-controller: swagger_server.controllers.customers_controller
  /customers/logout:
    get:
      tags:
      - customers
      summary: Logs out current logged in customer session
      description: ""
      operationId: logout_customer
      parameters:
      - name: email
        in: query
        description: The email address of a customer
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Customer has been logged out successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "400":
          description: Invalid input details provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputError'
        "500":
          description: Unexpected failure in the service layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServiceError'
      x-openapi-router-controller: swagger_server.controllers.customers_controller
  /customers/{customer_id}:
    get:
      tags:
      - customers
      summary: Get customer by customer id
      description: Retrieve all details of a customer using their id
      operationId: get_customer_by_id
      parameters:
      - name: customer_id
        in: path
        description: Customer id of a customer
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Customer details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "400":
          description: Invalid input details provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputError'
        "404":
          description: Customer Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerNotFoundError'
        "500":
          description: Unexpected failure in the service layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServiceError'
      x-openapi-router-controller: swagger_server.controllers.customers_controller
    put:
      tags:
      - customers
      summary: Update customer
      description: This can only be done by the logged in customer.
      operationId: update_customer
      parameters:
      - name: customer_id
        in: path
        description: Customer id of a customer
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Update an existing customer in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        "200":
          description: Customer details updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "400":
          description: Invalid input details provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputError'
        "404":
          description: Customer Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerNotFoundError'
        "500":
          description: Unexpected failure in the service layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServiceError'
      x-openapi-router-controller: swagger_server.controllers.customers_controller
  /customers/{customer_id}/addresses:
    get:
      tags:
      - customers
      summary: Get all customer addresses by customer id
      description: Returns a list of addresses.
      operationId: get_addresses_by_id
      parameters:
      - name: customer_id
        in: path
        description: Customer id of a customer
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Customer address details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressList'
        "400":
          description: Invalid input details provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputError'
        "404":
          description: No customer address found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressNotFoundError'
        "500":
          description: Unexpected failure in the service layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServiceError'
      x-openapi-router-controller: swagger_server.controllers.customers_controller
    put:
      tags:
      - customers
      summary: Update customer address
      description: "If address_id is not provided, it creates a new address entry.\
        \ Otherwise it updates the existing address in the database."
      operationId: update_address
      parameters:
      - name: customer_id
        in: path
        description: Customer id of a customer
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: address_id
        in: query
        description: Address id that needs to be updated
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: Update an existent customer address in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        "200":
          description: Address details updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        "400":
          description: Invalid input details provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputError'
        "404":
          description: Address Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressNotFoundError'
        "500":
          description: Unexpected failure in the service layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServiceError'
      x-openapi-router-controller: swagger_server.controllers.customers_controller
  /customers/{customer_id}/cards:
    get:
      tags:
      - customers
      summary: Get all customer's cards by customer id
      description: Returns a list of cards. Returns an empty array if no card exists.
      operationId: get_cards_by_id
      parameters:
      - name: customer_id
        in: path
        description: Customer id of a customer
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: All card details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardList'
        "400":
          description: Invalid input details provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputError'
        "500":
          description: Unexpected failure in the service layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServiceError'
      x-openapi-router-controller: swagger_server.controllers.customers_controller
    put:
      tags:
      - customers
      summary: Update card details
      description: "If card_id is not provided, it creates a new card entry. Otherwise\
        \ it updates the existing card in the database."
      operationId: update_card
      parameters:
      - name: customer_id
        in: path
        description: Customer id of a customer
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: card_id
        in: query
        description: Card id that needs to be updated
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: Update an existent customer's card details in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
      responses:
        "200":
          description: Customer's card details updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        "400":
          description: Invalid input details provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidInputError'
        "404":
          description: Card Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardNotFoundError'
        "500":
          description: Unexpected failure in the service layer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedServiceError'
      x-openapi-router-controller: swagger_server.controllers.customers_controller
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: Alex
        lastName:
          type: string
          example: Holl
        email:
          type: string
          example: alex@gmail.com
        password:
          type: string
          example: "123456"
        mobile_no:
          type: string
          example: +61-469306295
        location:
          type: string
          example: Sydney
        profile_pic:
          type: string
          example: profile_pic_key
        token:
          type: string
          example: unique_token_code
        points:
          type: number
          example: 200.8
      example:
        firstName: Alex
        lastName: Holl
        password: "123456"
        mobile_no: +61-469306295
        profile_pic: profile_pic_key
        location: Sydney
        id: 10
        email: alex@gmail.com
        token: unique_token_code
        points: 200.8
      xml:
        name: customer
    AddressList:
      type: array
      items:
        $ref: '#/components/schemas/Address'
    Address:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 25
        customer_id:
          type: integer
          format: int64
          example: 10
        unit_no:
          type: string
          example: 7/9
        addr_1:
          type: string
          example: Churchill Avenue
        addr_2:
          type: string
          example: Strathfield
        city:
          type: string
          example: Sydney
        state:
          type: string
          example: NSW
        pincode:
          type: string
          example: "2135"
        primary1:
          type: string
          example: "Y"
      example:
        pincode: "2135"
        addr_2: Strathfield
        addr_1: Churchill Avenue
        city: Sydney
        unit_no: 7/9
        id: 25
        state: NSW
        primary1: "Y"
        customer_id: 10
    CardList:
      type: array
      items:
        $ref: '#/components/schemas/Card'
    Card:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        customer_id:
          type: integer
          format: int64
          example: 10
        customer_name:
          type: string
          example: Alex Holl
        card_number:
          type: string
          example: "1111222233334444"
        card_expiry:
          type: string
          example: MMYY
        primary1:
          type: string
          example: "Y"
      example:
        card_number: "1111222233334444"
        id: 2
        customer_name: Alex Holl
        primary1: "Y"
        customer_id: 10
        card_expiry: MMYY
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    Error:
      type: object
      properties:
        code:
          type: string
        type:
          type: string
        message:
          type: string
    InvalidInputError:
      example:
        code: 400
        type: InvalidInputError
        message: "The following mandatory fields were not provided: %field_name_1%,\
          \ %field_name_2%"
      allOf:
      - $ref: '#/components/schemas/Error'
    CustomerNotFoundError:
      example:
        code: 404
        type: CustomerNotFoundError
        message: "The following Customer does not exist: %customer_id%"
      allOf:
      - $ref: '#/components/schemas/Error'
    AddressNotFoundError:
      example:
        code: 404
        type: AddressNotFoundError
        message: "The following Address does not exist: %address_id%"
      allOf:
      - $ref: '#/components/schemas/Error'
    CardNotFoundError:
      example:
        code: 404
        type: CardNotFoundError
        message: "The following Card does not exist: %card_id%"
      allOf:
      - $ref: '#/components/schemas/Error'
    UnexpectedServiceError:
      example:
        code: 500
        type: UnexpectedServiceError
        message: "The following unexpected runtime error has occurred: %error%"
      allOf:
      - $ref: '#/components/schemas/Error'

